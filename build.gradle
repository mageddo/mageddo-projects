import java.nio.charset.StandardCharsets

subprojects {

	repositories {
		mavenCentral()
		mavenLocal()
	}

	apply plugin: 'java'
	apply plugin: 'maven'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	compileTestJava {
		sourceCompatibility = JavaVersion.VERSION_11
		targetCompatibility = JavaVersion.VERSION_11
	}

	configurations {
		provided
	}

	sourceSets {
		main {
			compileClasspath += configurations.provided
			test.compileClasspath += configurations.provided
			test.runtimeClasspath += configurations.provided
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = StandardCharsets.UTF_8.displayName()
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}


	artifacts {
		archives javadocJar, sourcesJar
	}

	if (project.hasProperty("signing.keyId")) {
		apply plugin: 'signing'
		signing {
			sign configurations.archives
		}
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: project.findProperty("ossrhUsername"), password: project.findProperty("ossrhPassword"))
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: project.findProperty("ossrhUsername"), password: project.findProperty("ossrhPassword"))
				}

				pom.project {
					name project.name
					packaging 'jar'
					description project.description
					url "https://github.com/mageddo/mageddo-projects/tree/master/" + project.name

					scm {
						connection 'https://github.com/mageddo/mageddo-projects.git'
						developerConnection 'https://github.com/mageddo/mageddo-projects.git'
						url "https://github.com/mageddo/mageddo-projects/tree/master/" + project.name
					}

					licenses {
						license {
							name 'The Apache License, Version 2.0'
							url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}

					developers {
						developer {
							id 'mageddo'
							name 'Elvis Souza'
							email 'edigitalb@gmail.com'
						}
					}
				}
			}
		}
	}
}

project(':spring-profile'){

	archivesBaseName = 'spring-profile'

	dependencies {

		provided group: 'org.springframework', name: 'spring-core', version: springVersion
		provided group: 'commons-logging', name: 'commons-logging', version: '1.2'

		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

	}
}

project(':commons'){
	archivesBaseName = 'commons'
	dependencies {
		provided group: 'org.apache.commons', name: 'commons-compress', version: '1.18'
		provided group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'
		provided group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
		provided group: 'org.jboss.resteasy', name: 'resteasy-client', version: '3.6.2.Final'
		provided group: 'org.jboss.resteasy', name: 'resteasy-jackson2-provider', version: '3.6.2.Final'
		provided group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.1.1.RELEASE'
		provided group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
	}
}

project(':feature-switch'){
	archivesBaseName = 'feature-switch'
	version '1.4.3'

	dependencies {

		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
		compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.6'
		compileOnly group: 'org.springframework.boot', name: 'spring-boot-starter', version: '2.0.4.RELEASE'

		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.4.1'
	}

}

project(':spring-hawtio'){
	archivesBaseName = 'spring-hawtio'
	version '2.3.0_1.2.0'

	dependencies {
		compile group: 'io.hawt', name: 'hawtio-system', version: '2.3.0'
		compileOnly group: 'io.hawt', name: 'hawtio-default', version: '2.3.0'
		compileOnly group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.3.RELEASE'
	}

	processResources {
		doLast {
			def dep = project.configurations.compileOnly.filter { it.name.contains('hawtio-default') }.singleFile
			ant.unzip(src: dep, dest: new File(project.sourceSets.main.output.resourcesDir, "hawtio-static")){
				patternset(excludes: '**/WEB-INF/**,**/META-INF/**')
			}
		}
	}
}

project(':spring-log-tracer'){

	archivesBaseName = 'spring-log-tracer'
	version '1.0.0'

	dependencies {

		provided group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion

		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
		testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion

	}
}

project(':spring-kafka'){
	archivesBaseName = 'spring-kafka'
	version '2.0.1'

	dependencies {

		provided group: 'org.springframework.boot', name: 'spring-boot-starter', version: springBootVersion
		provided group: 'org.springframework.kafka', name: 'spring-kafka', version: springKafkaVersion
		provided group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.5'

		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
		testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
		testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: springBootVersion
		testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion
		testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.2.8'

	}
}
